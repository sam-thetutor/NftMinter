// Version: 1.0.0
type AccountIdentifier = Text;
type AccountIdentifier__1 = AccountIdentifier;
type AccountIdentifier__3 = AccountIdentifier__1;
type AssetHandle = Text;
type AssetId = Nat32;
type AssetType =
  {
    #canister : {canister : Text; id : AssetId};
    #direct : [ChunkId];
    #other : Text
  };
type Asset__1 = {atype : AssetType; ctype : Text; filename : Text};
type CapDetailValue =
  {
    #False;
    #Float : Float;
    #I64 : Int64;
    #Principal : Principal;
    #Slice : [Nat8];
    #Text : Text;
    #True;
    #U64 : Nat64;
    #Vec : [CapDetailValue]
  };
type CapIndefiniteEvent =
  {caller : Principal; details : [(Text, CapDetailValue)]; operation : Text};
type ChunkId = Nat32;
type Listing = {locked : ?Time__2; price : Nat64; seller : Principal};
type MetadataContainer =
  {#blob : Blob; #data : [MetadataValue]; #json : Text};
type MetadataValue =
  (Text, {#blob : Blob; #nat : Nat; #nat8 : Nat8; #text : Text});
type Metadata__1 =
  {
    #fungible :
      {
        decimals : Nat8;
        metadata : ?MetadataContainer;
        name : Text;
        symbol : Text
      };
    #nonfungible :
      {
        asset : Text;
        metadata : ?MetadataContainer;
        name : Text;
        thumbnail : Text
      }
  };
type Payment =
  {
    amount : Nat64;
    expires : Time__2;
    payer : AccountIdentifier__3;
    purchase : PaymentType;
    subaccount : SubAccount__2
  };
type PaymentType =
  {#nft : TokenIndex__1; #nfts : [TokenIndex__1]; #sale : Nat64};
type Sale =
  {
    end : Time__2;
    groups : [SalePricingGroup];
    quantity : Nat;
    remaining : SaleRemaining;
    start : Time__2
  };
type SalePricingGroup =
  {
    end : Time__2;
    limit : (Nat64, Nat64);
    name : Text;
    participants : [AccountIdentifier__3];
    pricing : [(Nat64, Nat64)];
    start : Time__2
  };
type SaleRemaining = {#burn; #retain; #send : AccountIdentifier__3};
type SaleTransaction =
  {
    buyer : AccountIdentifier__3;
    price : Nat64;
    seller : Principal;
    time : Time__2;
    tokens : [TokenIndex__1]
  };
type SubAccount = [Nat8];
type SubAccount__1 = SubAccount;
type SubAccount__2 = SubAccount__1;
type Time = Int;
type Time__2 = Time;
type TokenIndex = Nat32;
type TokenIndex__1 = TokenIndex;
type Transaction =
  {
    buyer : AccountIdentifier__3;
    price : Nat64;
    seller : AccountIdentifier__3;
    time : Time__2;
    token : TokenIndex__1
  };
type TransactionEvent =
  {
    from : Principal;
    to : Text;
    tokenIdentifier : Text;
    transaction_time : Int;
    transaction_type : Text
  };
actor {
  stable var cap_rootBucketId : ?Text;
  stable var config_admin : Principal;
  stable var config_canCreateAssetCanister : Bool;
  stable var config_collection_data : Text;
  stable var config_collection_name : Text;
  stable var config_initial_sale_royalty_address : Text;
  stable var config_marketplace_open : Int;
  stable var config_owner : Principal;
  stable var config_royalty : [(AccountIdentifier__3, Nat64)];
  stable var data_assetCanistersTableState : [(Principal, Nat)];
  stable var data_assetsTableState : [(AssetHandle, Asset__1)];
  stable var data_capEventsQueueState : [CapIndefiniteEvent];
  stable var data_chunksTableState : [(ChunkId, Blob)];
  stable var data_disbursementQueueState :
    [(TokenIndex__1, AccountIdentifier__3, SubAccount__2, Nat64)];
  stable var data_expiredPayments : [(AccountIdentifier__3, SubAccount__2)];
  stable var data_internalNextChunkId : Nat32;
  stable var data_internalNextSubAccount : Nat;
  stable var data_internalNextTokenId : Nat32;
  stable var data_internalRunHeartbeat : Bool;
  stable var data_mintersTableState : [(AccountIdentifier__3, ())];
  stable var data_ownersTableState :
    [(AccountIdentifier__3, [TokenIndex__1])];
  stable var data_paymentSettlementsTableState :
    [(AccountIdentifier__3, Payment)];
  stable var data_registryTableState :
    [(TokenIndex__1, AccountIdentifier__3)];
  stable var data_saleCurrent : ?Sale;
  stable var data_saleGroupsTableState : [(AccountIdentifier__3, Nat)];
  stable var data_saleSoldQuantity : Nat;
  stable var data_saleSoldTracker : [(Nat, AccountIdentifier__3, Nat64)];
  stable var data_saleTokensForSale : [TokenIndex__1];
  stable var data_saleTransactions : [SaleTransaction];
  stable var data_soldIcp : Nat64;
  stable var data_storedChunkSize : Nat;
  stable var data_supply : Nat;
  stable var data_tokenListingTableState : [(TokenIndex__1, Listing)];
  stable var data_tokenMetadataTableState : [(TokenIndex__1, Metadata__1)];
  stable var data_transactions : [Transaction];
  stable var transactionEventHistory : [(TokenIndex__1, [TransactionEvent])]
};
